<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   initialize="init()"
			   implements="com.apptinic.turnbased.foundation.IEndGameDelegate" xmlns:foundation="com.apptinic.turnbased.foundation.*">
	<s:Button click="" />
	
<fx:Script>
<![CDATA[
	import com.apptinic.turnbased.foundation.GameContext;
	import com.apptinic.turnbased.foundation.GameKernel;
	import com.apptinic.turnbased.foundation.GameState;
	import com.apptinic.turnbased.foundation.IEndGameDelegate;
	import com.apptinic.turnbased.foundation.Player;
	import com.apptinic.turnbased.playertest.TestPlayer;
	import com.apptinic.util.ObjectEvent;

public var gamek:GameKernel;
protected var state:GameState;
protected var turn:int = 0;
	
protected function init():void{
	gamek = GameKernel.shared;
	state = gamek.initGame();
	state.endGameDelegate = this;
	
	var k:TestPlayer = new TestPlayer();
	k.name = "Kyle";
	var j:TestPlayer = new TestPlayer();
	j.name = "Justin";
	var s:TestPlayer = new TestPlayer();
	s.name = "Sarah";
	state.players = [s,k,j];
	
	state.addEventListener(GameState.NEW_TURN,onGameEvent);
	state.addEventListener(GameState.PROMPTING_PLAYER,onGameEvent);
	state.addEventListener(GameState.PLAYER_PASSED,onGameEvent);
	state.addEventListener(GameState.ACTION_STACKED,onGameEvent);
	state.addEventListener(GameState.ACTION_RESOLVED,onGameEvent);
	state.addEventListener(GameState.GAME_ENDED,onGameEvent);
	
	gamek.begin();
}

public function getGameWinner(state:GameState):Player{
	if(turn>15)
		return state.players[0];
	else{//trace("**** IT IS TURN "+turn);
		return null;
	}
}

protected function onGameEvent(event:ObjectEvent):void{
	if(event.type == GameState.NEW_TURN)
		turn++;
	if(event.obj.hasOwnProperty("name"))
		trace(event.type+": "+event.obj.name);
	else
		trace(event.type);
}


]]>
</fx:Script>
</s:Application>
